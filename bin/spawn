#!/usr/bin/env ruby

require 'fileutils'

POPO_PATH = ENV['popo_path']
POPO_TARGET = ENV['popo_target']
KILL_BIN = `which kill`.chomp
NGINX_PATH = File.join(POPO_PATH, 'nginx', '/')
NGINX_BIN = `which nginx`.strip
NGINX_CONF = 'nginx.conf'
NGINX_PID = 'nginx.pid'
GREEN="\033[1;32m"
RED="\033[1;31m"
YELLOW="\033[1;33m"
NO_COLOUR="\033[0m"

class Spawn

  def self.run(cmd)
    case cmd
    when 'start'
      start
    when 'stop'
      stop
    when 'check'
      check
    when 'restart'
      stop
      start
    end
  end

  def self.start(flag = false)
    if get_pid && get_worker_pids
      if flag
        say "nginx #{GREEN}STARTED!#{NO_COLOUR}"
      else
        say "nginx already #{YELLOW}EXISTS!#{NO_COLOUR}"
        check
      end
      exit
    else
      say "starting nginx..."
      sleep(0.5)
      Dir.chdir(NGINX_PATH) { `#{NGINX_BIN} -c #{NGINX_CONF} -p #{NGINX_PATH} 2>&1` }
      check
    end

    start(true)
  end

  def self.has_pid?
    File.exist?(File.join(NGINX_PATH, 'run', 'nginx.pid')) &&
    !File.zero?(File.join(NGINX_PATH, 'run', 'nginx.pid'))
  end

  def self.get_pid
    if has_pid?
      File.read(File.join(NGINX_PATH, 'run', NGINX_PID)).chomp!
    else
      say "#{RED}pid does not exist!#{NO_COLOUR}"
      false
    end
  end

  def self.stop
    pid = get_pid

    if pid
      begin
        say "killing #{YELLOW}#{pid}#{NO_COLOUR}..." do
          sleep(0.5)
          system("#{KILL_BIN} #{pid}")
        end
      rescue Errno::ESRCH
      ensure
        if FileUtils.rm_rf(File.join(NGINX_PATH, 'run', NGINX_PID))
          say "#{GREEN}pid removed!#{NO_COLOUR}"
        end
      end
    else
      say "#{RED}nginx not running!#{NO_COLOUR}"
      exit
    end
  end
  
  def self.get_worker_pids
    worker_pids = `ps ax | grep 'nginx' | grep -v grep | awk '{print $1}'`
  end

  def self.check
    if get_pid && get_worker_pids
      say "nginx is running: #{GREEN}#{get_pid}#{NO_COLOUR}"
    end
  end

  def self.say(msg, &block)
    $indent = false
    if block_given?
      say(msg)
      $indent = true
      yield
      $indent = false
      say "done."
    else
      if $indent
        puts("  %s" % msg)
      else
        puts(msg)
      end
      $stdout.flush
    end
end


end

if ARGV.count > 0
  cmd = ARGV.dup
  Spawn.run(cmd.shift)
else
  Spawn.say "Doing nothing!"
  Spawn.say "Available commands are:"
  Spawn.say "#{GREEN}stop start check#{NO_COLOUR}"
end
